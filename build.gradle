plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'mod-update' version '2.0.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

loom {
    accessWidenerPath = file('src/main/resources/vcinteraction.accesswidener')
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven { url 'https://maven.nucleoid.xyz' }
    repositories {
        maven {
            url = 'https://api.modrinth.com/maven'
            content {
                includeGroup 'maven.modrinth'
            }
        }
    }
}

runClient.doFirst {
    args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    Set<String> apiModules = [
            'fabric-api-base',
            'fabric-content-registries-v0',
            'fabric-resource-loader-v0',
            'fabric-registry-sync-v0',
            'fabric-lifecycle-events-v1'
    ]

    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, fabric_version)))
    }

    modImplementation include("eu.pb4:polymer-reg-sync-manipulator:${polymer_version}")

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadow "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"

    modImplementation "maven.modrinth:simple-voice-chat:fabric-${voicechat_mod_version}"
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'version': version,
                'minecraft_dependency': minecraft_dependency,
                'minecraft_version': minecraft_version,
                'loader_version': loader_version,
                'fabric_version': fabric_version,
                'voicechat_api_version': voicechat_api_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
}

curseforge {
    apiKey = file('curseforge_api_key.txt').exists() ? file('curseforge_api_key.txt').text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Fabric'
        addGameVersion 'Java 17'
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "[FABRIC][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                requiredDependency 'simple-voice-chat'
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

tasks.modrinth.configure({
    group = 'upload'
})
tasks.modrinthSyncBody.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "fabric-${mod_version}"
    versionName = "[FABRIC][${minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = remapJar
    versionType = release_type.toUpperCase()
    changelog = file('changelog.md').text
    gameVersions = [minecraft_version]
    loaders = ['fabric']
    dependencies {
        required.project '9eGKb6K1' // Simple Voice Chat
    }
    syncBodyFrom = file('readme.md').text
}
tasks.modrinth.dependsOn(remapJar)

modUpdate {
    serverURL = 'https://update.maxhenkel.de/'
    modID = mod_id
    gameVersion = minecraft_version
    modLoader = 'fabric'
    modVersion = mod_version
    changelogFile = file('changelog.md')
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier = 'shadow-dev'
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
}

remapJar {
    dependsOn shadowJar
    inputFile = shadowJar.archiveFile.get()
}